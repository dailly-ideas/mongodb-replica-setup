version: "3.8"

services:
  mongo1:
    build:
      context: .
      dockerfile: mongodb/Dockerfile
    ports:
      - "30000:27017" # Primary
    volumes:
      - ./.data/mongo1:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=Admin123
    restart: always
    networks:
      - mongo-net
    command: mongod --replSet rs0 --auth --keyFile /etc/mongodb.keyfile --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  mongo2:
    build:
      context: .
      dockerfile: mongodb/Dockerfile
    ports:
      - "30001:27017" # Secondary
    volumes:
      - ./.data/mongo2:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=Admin123
    restart: always
    networks:
      - mongo-net
    command: mongod --replSet rs0 --auth --keyFile /etc/mongodb.keyfile --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  mongo3:
    build:
      context: .
      dockerfile: mongodb/Dockerfile
    ports:
      - "30002:27017" # Secondary
    volumes:
      - ./.data/mongo3:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=Admin123
    restart: always
    networks:
      - mongo-net
    command: mongod --replSet rs0 --auth --keyFile /etc/mongodb.keyfile --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  mongo-init:
    image: mongo:7.0
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy
    networks:
      - mongo-net
    ports:
      - "30003:27017"
    entrypoint: >
      bash -c "
      echo 'Initializing MongoDB Replica Set...' &&
      mongosh --host mongo1:27017 -u admin -p Admin123 --authenticationDatabase admin --retryWrites=false --eval '
        rs.initiate({
          _id: \"rs0\",
          members: [
            { _id: 0, host: \"mongo1:27017\", priority: 10 },
            { _id: 1, host: \"mongo2:27017\", priority: 1 },
            { _id: 2, host: \"mongo3:27017\", priority: 1 }
          ]
        });
      ' &&
      echo 'Replica Set initialized!' &&
      echo 'Waiting for replica set to be ready...' &&
      mongosh --host mongo1:27017 -u admin -p Admin123 --authenticationDatabase admin --retryWrites=false --eval '
        while(rs.status().ok !== 1) {
          print(\"Waiting for replica set...\");
          sleep(1000);
        }
        print(\"Replica set is ready!\");
      '"

networks:
  mongo-net:
    driver: bridge
